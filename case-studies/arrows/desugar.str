module desugar

imports lib/haskell

rules
  desugar-arrow :
    |[ proc $pat -> $cmd ]| ->
    |[ arr (\$pat -> $(<tuple> pat-vars))
       >>> $(<desugar-arrow'(|pat-vars)> cmd) ]|
  where <free-pat-vars> pat => pat-vars


  desugar-arrow'(|vars) :
    cmd |[ $f -< $e ]| ->
    |[ arr (\$(<tuple-pat> vars) -> $e) >>> $f ]|

  desugar-arrow'(|vars) :
    cmd |[ $f -<< $e ]| ->
    |[ arr (\$(<tuple-pat> vars) -> ($f, $e)) >>> app ]|

  desugar-arrow'(|vars) :
    cmd |[ if $e then $c1 else $c2 ]| ->
    |[ arr (\$(<tuple-pat> vars) -> 
            if $e 
              then Left $(<tuple> vars)
              else Right $(<tuple> vars))
       >>> ($(<desugar-arrow'(|vars)> c1) ||| $(<desugar-arrow'(|vars)> c2)) ]|
  
  desugar-arrow'(|vars) :
    cmd |[ let $*decls in $c ]| ->
    |[ arr (\$(<tuple-pat> vars) -> let $*decls in $(<tuple> all-vars))
       >>> $(<desugar-arrow'(|all-vars)> c) ]|
  where <free-decls-vars> decls => decls-vars;
        <conc> (vars, decls-vars) => all-vars

  desugar-arrow'(|vars) :
    cmd |[ \$p -> $c ]| ->
    |[ arr (\($(<tuple-pat> vars), p) -> $(<tuple> all-vars))
       >>> $(<desugar-arrow'(|all-vars)> c) ]|
  where <free-pat-vars> p => pat-vars;
        <conc> (vars, pat-vars) => all-vars
        
  desugar-arrow'(|vars) :
    cmd |[ $c $e ]| ->
    |[ arr (\$(<tuple-pat> vars) -> ($(<tuple> vars), $e))
       >>> $(<desugar-arrow'(|vars)> c) ]|

  desugar-arrow'(|vars) :
    ArrForm(e, cs) ->
    <apply-all(|k)> (e, <map(desugar-arrow'(|vars))> cs)
  where k := |[ \$(<tuple-pat> vars) -> $(<tuple> vars) ]|

  desugar-arrow'(|vars) :
    ArrOpApp(c1, op, c2) ->
    <desugar-arrow'(|vars)> ArrForm(BinCon(op), [c1, c2])

  desugar-arrow'(|vars) :
    cmd |[ do $c ]| ->
    <desugar-arrow'(|vars)> c

  desugar-arrow'(|vars) :
    cmd |[ do { let $*decls; $*cs } ]| ->
    |[ arr (\$(<tuple-pat> vars) -> let $*decls in $(<tuple> all-vars))
       >>> $(<desugar-arrow'(|all-vars)> cmd |[do $*cs]|) ]|
  where <free-decls-vars> decls => decls-vars;
        <conc> (vars, decls-vars) => all-vars

  desugar-arrow'(|vars) :
    cmd |[ do { $c; $*cs } ]| ->
    |[ arr (\$(<tuple-pat> vars) -> ($(<tuple> vars), $(<tuple> vars)))
       >>> first $(<desugar-arrow'(|vars)> c)
       >>> arr snd
       >>> $(<desugar-arrow'(|vars)> cmd |[do $*cs]|) ]|

  desugar-arrow'(|vars) :
    cmd |[ do { $p <- $c; $*cs } ]| ->
    |[ arr (\$(<tuple-pat> vars) -> ($(<tuple> vars), $(<tuple> vars)))
       >>> first $(<desugar-arrow'(|vars)> c)
       >>> arr (\($p, $(<tuple-pat> vars)) -> $(<tuple> all-vars))
       >>> $(<desugar-arrow'(|all-vars)> cmd |[do $*cs]|) ]|
  where <free-pat-vars> p => pat-vars;
        <conc> (pat-vars, vars) => all-vars

rules
  tuple-pat : [] -> Constr(Unit())
  tuple-pat : [p] -> p
  tuple-pat : [p|ps] -> Tuple(p,ps)

  tuple : [] -> Constr(Unit())
  tuple : [e] -> e
  tuple : [e|es] -> Product(ECons(e,es))

  free-pat-vars =
    collect-all(?Var(_))

  free-decls-vars = 
    collect-all(?Var(_), union, \VarFunLHS(v,_) -> v\)

  apply-all(|k) : (e, []) -> e
  apply-all(|k) :
    (e, [c|cs]) ->
    <apply-all(|k)> (|[$e (arr $k >>> $c)]|, cs)

  collect-all(s,un) =
    rec x(
      ![<s> | <crush(![], un, x)>]
      <+ crush(![], un, x)
    )

  collect-all(s, un, reduce) =
    rec x(
       ![<s> | <crush(![],un,x)>]
    <+ reduce; x
    <+ crush(![],un,x)
    )

  crush(nul, sum, s) : _#(xs) -> <foldr(nul, sum, s)> xs

  foldr(s1, s2, f)  = []; s1 + \ [y|ys] -> <s2> (<f> y, <foldr(s1, s2, f)> ys) \
