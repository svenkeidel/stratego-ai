module cca

imports haskell

rules
  step: |[ arr $f >>> arr $g ]| -> |[ arr ($g . $f) ]|
  step: |[ arr $f >>> loopD $i $g ]| -> |[ loopD $i ($g . ($f *** id)) ]|
  step: |[ loopD $i $f >>> arr $g ]| -> |[ loopD $i (($g *** id) . $f) ]|
  step: |[ loopD $i $f >>> loopD $j $g ]| -> |[ loopD ($i,$j) (assoc' (juggle' ($g *** id) . ($f *** id))) ]|
  step: |[ first (loopD $i $f) ]| -> |[ loopD $i (juggle' (f *** id)) ]|
  step: |[ loop (arr $f) ]| -> |[ arr (trace $f) ]|
  step: |[ loop (loopD $i $f) ]| -> |[ loopD $i (trace (juggle' f)) ]|

  norm: |[ arr $f ]| -> |[ arr $f ]|
  norm: |[ loopD $i $f ]| -> |[ loopD $i $f ]|
  norm: |[ init $i ]| -> |[ loopD $i swap ]|
  norm: |[ $e1 >>> $e2 ]| -> <step> |[ $n1 >>> $n2 ]|
    where <norm> e1 => n1; <norm> e2 => n2
  norm: |[ first $f ]| -> <step> |[ first $nf ]|
    where <norm> f => nf
  norm: |[ loop $f ]| -> <step> |[ loop $nf ]|
    where <norm> f => nf

