module cca-desugared

imports
  haskell

signature 
  sorts List(a)  

  constructors
      Nil  : List(a)
      Cons : a * List(a) -> List(a)
      Conc : List(a) * List(a) -> List(a)
           : ()
           : a -> (a)
           : a * b -> (a, b)
           : a * b * c -> (a, b, c)

rules

  step :
    OpApp(
      AppBin(Var("arr"), f)
    , ">>>"
    , AppBin(Var("arr"), g)
    ) -> AppBin(
           Var("arr")
         , OpApp(g, ".", f)
         )

  step :
    OpApp(
      AppBin(Var("arr"), f)
    , ">>>"
    , AppBin(
        AppBin(Var("loopD"), i)
      , g
      )
    ) -> AppBin(
           AppBin(Var("loopD"), i)
         , OpApp(
             g
           , "."
           , OpApp(f, "***", Var("id"))
           )
         )

  step :
    OpApp(
      AppBin(
        AppBin(Var("loopD"), i)
      , f
      )
    , ">>>"
    , AppBin(Var("arr"), g)
    ) -> AppBin(
           AppBin(Var("loopD"), i)
         , OpApp(
             OpApp(g, "***", Var("id"))
           , "."
           , f
           )
         )

  step :
    OpApp(
      AppBin(
        AppBin(Var("loopD"), i)
      , f
      )
    , ">>>"
    , AppBin(
        AppBin(Var("loopD"), j)
      , g
      )
    ) -> AppBin(
           AppBin(
             Var("loopD")
           , Product(ECons(i, [j]))
           )
         , AppBin(
             Var("assoc'")
           , OpApp(
               AppBin(
                 Var("juggle'")
               , OpApp(g, "***", Var("id"))
               )
             , "."
             , OpApp(f, "***", Var("id"))
             )
           )
         )

  step :
    AppBin(
      Var("first")
    , AppBin(
        AppBin(Var("loopD"), i)
      , f
      )
    ) -> AppBin(
           AppBin(Var("loopD"), i)
         , AppBin(
             Var("juggle'")
           , OpApp(
               Var("f")
             , "***"
             , Var("id")
             )
           )
         )

  step :
    AppBin(
      Var("loop")
    , AppBin(Var("arr"), f)
    ) -> AppBin(
           Var("arr")
         , AppBin(Var("trace"), f)
         )

  step :
    AppBin(
      Var("loop")
    , AppBin(
        AppBin(Var("loopD"), i)
      , f
      )
    ) -> AppBin(
           AppBin(Var("loopD"), i)
         , AppBin(
             Var("trace")
           , AppBin(
               Var("juggle'")
             , Var("f")
             )
           )
         )

  norm :
    AppBin(Var("arr"), f) -> AppBin(Var("arr"), f)

  norm :
    AppBin(
      AppBin(Var("loopD"), i)
    , f
    ) -> AppBin(
           AppBin(Var("loopD"), i)
         , f
         )

  norm :
    AppBin(Var("init"), i) -> AppBin(
                                AppBin(Var("loopD"), i)
                              , Var("swap")
                              )

  norm :
    OpApp(e1, ">>>", e2) -> <step> OpApp(n1, ">>>", n2)
    where <norm> e1 => n1
          ; <norm> e2 => n2

  norm :
    AppBin(Var("first"), f) -> <step> AppBin(Var("first"), nf)
    where <norm> f => nf

  norm :
    AppBin(Var("loop"), f) -> <step> AppBin(Var("loop"), nf)
    where <norm> f => nf
